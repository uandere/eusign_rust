#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_variables)]
#![allow(dead_code)]

pub mod helpers;

use helpers::*;
use std::ffi::{c_char, c_int, c_uchar, c_ulong, c_void, CStr, CString};
use std::fs::{File, OpenOptions};
use std::io::{Read, Write};
use std::mem;
use std::ptr;
use std::slice;

// Bring in all the bindgen-generated FFI:
include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

// For convenience, define some constants (matching your original #defines)
const PRIVATE_KEY_FILE_PATH: &str = "./Modules/PKey/key_1134326253_1134326253.jks";
const PRIVATE_KEY_PASSWORD: &str = "Ktqx02712";
const RESPONSE_FILE_PATH: &str = "./Modules/Data/response.json";

const CAS_JSON_PATH: &str = "./Modules/Settings/CAs.json";
const CA_CERTIFICATES_PATH: &str = "./Modules/Certificates/CACertificates.p7b";
const SZ_PATH: &str = "./Modules/Certificates";

const PROXY_USE: c_int = 0;
const PROXY_ADDRESS: &str = "";
const PROXY_PORT: &str = "3128";
const PROXY_USER: &str = "";
const PROXY_PASSWORD: &str = "";

const DEFAULT_OCSP_SERVER: &str = "czo.gov.ua";
const DEFAULT_TSP_SERVER: &str = "ca.iit.com.ua";

// A couple of small example placeholders:
static mut G_SZ_SENDER_CERT: &str = "MIIFrDCCBVSgAwIBAgIUXphNUm+C848EAAAAc4OuAXED6AUwDQYLKoYkAgEBAQEDAQEwgb4xKTAnBgNVBAoMINCQ0KIg0JrQkSAi0J/QoNCY0JLQkNCi0JHQkNCd0JoiMT0wOwYDVQQDDDTQmtCd0JXQlNCfINCQ0KbQodCaINCQ0KIg0JrQkSAi0J/QoNCY0JLQkNCi0JHQkNCd0JoiMRkwFwYDVQQFExBVQS0xNDM2MDU3MC0yMzEwMQswCQYDVQQGEwJVQTERMA8GA1UEBwwI0JrQuNGX0LIxFzAVBgNVBGEMDk5UUlVBLTE0MzYwNTcwMB4XDTI1MDEyNzE1NDk1NFoXDTI2MDEyNzIxNTk1OVowgfQxIjAgBgNVBAoMGdCk0IbQl9CY0KfQndCQINCe0KHQntCR0JAxMTAvBgNVBAMMKNCU0JXQnNCn0KPQmiDQndCQ0JfQkNCgINCG0JPQntCg0J7QktCY0KcxFTATBgNVBAQMDNCU0JXQnNCn0KPQmjEkMCIGA1UEKgwb0J3QkNCX0JDQoCDQhtCT0J7QoNCe0JLQmNCnMRkwFwYDVQQFExBUSU5VQS0zNzkyOTA5NjM0MQswCQYDVQQGEwJVQTEZMBcGA1UEBwwQ0JPQntCg0J7QlNCY0KnQlTEbMBkGA1UECAwS0JLQntCb0JjQndCh0KzQmtCQMIGIMGAGCyqGJAIBAQEBAwEBMFEGDSqGJAIBAQEBAwEBAgYEQKnW60XxPHCCgMSWeyMfXq32WOukwDcpHTjZa/Alyk4X+OlyDcYVtDool18Lwd6jZDi1ZOosF5/QEj5tuPrFeQQDJAAEIXR9+ymPS8+qqqyiyRrKD3IV16LSYSax2D6Xna2tOQywAaOCAsMwggK/MCkGA1UdDgQiBCAGp2QdD1q9WHlbsrCSNsq8xkmY/GfxUdgvEAsKoFRxhDArBgNVHSMEJDAigCBemE1Sb4Lzj/S+LkAEaA3+s6/KwuQEdU0H0K5MhLB8HTAOBgNVHQ8BAf8EBAMCBsAwSAYDVR0gBEEwPzA9BgkqhiQCAQEBAgIwMDAuBggrBgEFBQcCARYiaHR0cHM6Ly9hY3NrLnByaXZhdGJhbmsudWEvYWNza2RvYzAJBgNVHRMEAjAAMGoGCCsGAQUFBwEDBF4wXDAIBgYEAI5GAQEwLAYGBACORgEFMCIwIBYaaHR0cHM6Ly9hY3NrLnByaXZhdGJhbmsudWETAmVuMBUGCCsGAQUFBwsCMAkGBwQAi+xJAQEwCwYJKoYkAgEBAQIBMD4GA1UdHwQ3MDUwM6AxoC+GLWh0dHA6Ly9hY3NrLnByaXZhdGJhbmsudWEvY3JsL1BCLTIwMjMtUzI0LmNybDBJBgNVHS4EQjBAMD6gPKA6hjhodHRwOi8vYWNzay5wcml2YXRiYW5rLnVhL2NybGRlbHRhL1BCLURlbHRhLTIwMjMtUzI0LmNybDCBhQYIKwYBBQUHAQEEeTB3MDQGCCsGAQUFBzABhihodHRwOi8vYWNzay5wcml2YXRiYW5rLnVhL3NlcnZpY2VzL29jc3AvMD8GCCsGAQUFBzAChjNodHRwOi8vYWNzay5wcml2YXRiYW5rLnVhL2FyY2gvZG93bmxvYWQvUEItMjAyMy5wN2IwQwYIKwYBBQUHAQsENzA1MDMGCCsGAQUFBzADhidodHRwOi8vYWNzay5wcml2YXRiYW5rLnVhL3NlcnZpY2VzL3RzcC8wPAYDVR0JBDUwMzAcBgwqhiQCAQEBCwEEAQExDBMKMzc5MjkwOTYzNDATBgwqhiQCAQEBCwEEBwExAxMBMDANBgsqhiQCAQEBAQMBAQNDAARA90nJatow7LTl08fxOgL+ASXqg7n7xRocbkoyAzYXNn3/wH5ka+Htm4118C8hp+/m1TOh6Zxw+To9Wbu9bAITCw==";
static mut G_SZ_CUSTOMER_CRYPTO: &str = "";

// Structures to mirror your C++ usage:
#[derive(Debug, Default)]
struct CASettings {
    issuerCNsv: Vec<String>,
    address: String,
    ocspAccessPointAddress: String,
    ocspAccessPointPort: String,
    cmpAddress: String,
    tspAddress: String,
    tspAddressPort: String,
    certsInKey: bool,
    directAccess: bool,
    qscdSNInCert: bool,
    cmpCompatibility: i32,
    codeEDRPOU: String,
}

#[derive(Debug, Default)]
struct BankIDResponse {
    state: String,
    cert: String,
    customerCrypto: String,
}

// We’ll store the pointer to EU_INTERFACE globally, as in your C++ code:
static mut G_P_IFACE: *const EU_INTERFACE = ptr::null();

///////////////////////////////////////////////////////////////////////////////
// Helper: Provide the same "GetErrorMessage" logic, but in Rust
///////////////////////////////////////////////////////////////////////////////
unsafe fn get_error_message(dwError: c_ulong) -> String {
    if G_P_IFACE.is_null() {
        return "Library not loaded".to_string();
    }
    let func = (*G_P_IFACE).GetErrorLangDesc.unwrap();
    // C function signature: GetErrorLangDesc(error, EU_EN_LANG) -> *mut c_char
    let c_ptr = func(dwError, EU_EN_LANG as u64);
    if c_ptr.is_null() {
        return "Unknown error".to_string();
    }
    // Convert from C-string
    let msg = CStr::from_ptr(c_ptr).to_string_lossy().into_owned();
    msg
}

fn remove_character_if_immediately_followed_by(s: &mut String, target: char, next_char: char) {
    let mut result = String::with_capacity(s.len());

    // We'll iterate through the characters of `s`, peeking ahead to see
    // if the next character is `next_char`.
    let mut chars = s.chars().peekable();
    while let Some(ch) = chars.next() {
        if ch == target {
            if let Some(&peek_ch) = chars.peek() {
                if peek_ch == next_char {
                    // Skip pushing `ch` (i.e. remove it), but do NOT consume `peek_ch`;
                    // we only skip the `target`, so continue to next iteration
                    continue;
                }
            }
        }
        result.push(ch);
    }

    *s = result;
}

fn read_file_to_string(file_path: &str) -> String {
    match std::fs::read_to_string(file_path) {
        Ok(s) => s,
        Err(e) => {
            eprintln!(
                "IIT EU Sign Usage: cannot open file for reading: {}",
                file_path
            );
            String::new()
        }
    }
}

fn get_value(json: &str, key: &str) -> String {
    // First, find `"key"` in the JSON
    let needle = format!("\"{}\"", key);
    let key_pos = match json.find(&needle) {
        Some(pos) => pos,
        None => return String::new(),
    };

    // Next, from that point forward, find the first `:`
    // This is naive and doesn’t handle nested structures, etc.
    let after_key = &json[key_pos..];
    let colon_pos = match after_key.find(':') {
        Some(pos) => pos,
        None => return String::new(),
    };

    // The value presumably starts after that colon
    let start_val = key_pos + colon_pos + 1; 
    let mut val_str = &json[start_val..];

    // Trim any leading whitespace
    val_str = val_str.trim_start();

    // Now read until the next comma or closing brace
    let stop_index = match val_str.find(&[',', '}'][..]) {
        Some(i) => i,
        None => val_str.len(),
    };
    let val_str = &val_str[..stop_index];
    
    val_str.trim().to_string()
}



/// Naive function to parse an array in the form:
///
///    `"key": [ "item1", "item2", "item3" ]`
///
/// It returns the vector of strings: `["item1", "item2", "item3"]`.
fn parse_array(json: &str, key: &str) -> Vec<String> {
    let mut result = Vec::new();

    let needle = format!("\"{}\"", key);
    // 1) Find `"key"` in `json`
    let start_key = match json.find(&needle) {
        Some(pos) => pos,
        None => return result,
    };

    // 2) From that slice forward, find the first '['
    let after_key = &json[start_key..];
    let bracket_offset = match after_key.find('[') {
        Some(pos) => pos,
        None => return result,
    };

    // The array contents begin just after '['
    let array_start_index = start_key + bracket_offset + 1;

    // 3) Find the matching ']' after that
    let remainder = &json[array_start_index..];
    let bracket_end_rel = match remainder.find(']') {
        Some(pos) => pos,
        None => return result,
    };

    let array_end_index = array_start_index + bracket_end_rel;

    // 4) The contents between '[' and ']' is:
    let array_slice = &json[array_start_index..array_end_index];

    // 5) Split that slice on commas, each part is one "element"
    for raw_item in array_slice.split(',') {
        let raw_item = raw_item.trim();
        // Possibly remove surrounding quotes
        let mut item = strip_quotes(raw_item.to_string());
        // Also remove backslashes if followed by quote (like \" in JSON)
        remove_character_if_immediately_followed_by(&mut item, '\\', '"');
        result.push(item);
    }

    result
}

fn parse_ca(json: &str) -> CASettings {
    let mut ca = CASettings::default();

    // issuerCNs array
    ca.issuerCNsv = parse_array(json, "issuerCNs");

    // Each field
    ca.address = strip_quotes(get_value(json, "address"));
    ca.ocspAccessPointAddress = strip_quotes(get_value(json, "ocspAccessPointAddress"));
    ca.ocspAccessPointPort = strip_quotes(get_value(json, "ocspAccessPointPort"));
    ca.cmpAddress = strip_quotes(get_value(json, "cmpAddress"));
    ca.tspAddress = strip_quotes(get_value(json, "tspAddress"));
    ca.tspAddressPort = strip_quotes(get_value(json, "tspAddressPort"));

    ca.certsInKey = get_value(json, "certsInKey").contains("true");
    ca.directAccess = get_value(json, "directAccess").contains("true");
    ca.qscdSNInCert = get_value(json, "qscdSNInCert").contains("true");

    let cmp_str = get_value(json, "cmpCompatibility");
    ca.cmpCompatibility = parse_int_in_string(&cmp_str).unwrap_or(-1);

    ca.codeEDRPOU = strip_quotes(get_value(json, "codeEDRPOU"));

    ca
}

fn strip_quotes(s: String) -> String {
    let s = s.trim();
    let s = s.strip_prefix('"').unwrap_or(s);  // remove leading quote if present
    let s = s.strip_suffix('"').unwrap_or(s);  // remove trailing quote if present
    s.to_string()
}

// Extract digits from a string and parse them as an integer
fn parse_int_in_string(s: &str) -> Option<i32> {
    let digits: String = s.chars().filter(|c| c.is_ascii_digit()).collect();
    if digits.is_empty() {
        None
    } else {
        digits.parse::<i32>().ok()
    }
}

fn parse_CAs_array(json_array: &str) -> Vec<CASettings> {
    let mut ca_list = Vec::new();
    let mut start = 0;
    while let Some(obj_pos) = json_array[start..].find('{') {
        let actual_pos = start + obj_pos;
        if let Some(end_pos) = json_array[actual_pos..].find('}') {
            let actual_end = actual_pos + end_pos;
            let json_object = &json_array[actual_pos..=actual_end];
            let ca = parse_ca(json_object);
            ca_list.push(ca);
            start = actual_end + 1;
        } else {
            break;
        }
    }
    ca_list
}

fn read_all_bytes(file_path: &str) -> Vec<u8> {
    match std::fs::read(file_path) {
        Ok(data) => data,
        Err(e) => {
            eprintln!(
                "IIT EU Sign Usage: Cannot open file for reading: {}",
                file_path
            );
            vec![]
        }
    }
}

fn write_all_text(file_path: &str, data: &str) {
    let res = std::fs::write(file_path, data);
    if let Err(e) = res {
        eprintln!(
            "IIT EU Sign Usage: cannot write to file {}: {}",
            file_path, e
        );
    }
}

///////////////////////////////////////////////////////////////////////////////
// The "Initialize()" logic from your example. We replicate it in Rust.
///////////////////////////////////////////////////////////////////////////////
unsafe fn Initialize() -> c_ulong {
    let mut dwError: c_ulong = 0;

    // If we are using the function-pointer interface, do:
    let set_ui_mode = (*G_P_IFACE).SetUIMode.unwrap();
    let initialize_fn = (*G_P_IFACE).Initialize.unwrap();

    set_ui_mode(0);

    dwError = initialize_fn();
    if dwError != EU_ERROR_NONE.into() {
        println!("{}", get_error_message(dwError));
        return dwError;
    }

    // Example: set some runtime parameters
    //   g_pIface->SetRuntimeParameter(EU_SAVE_SETTINGS_PARAMETER, &nSaveSettings, EU_SAVE_SETTINGS_PARAMETER_LENGTH);
    // We do it in Rust similarly:
    let set_runtime_parameter = (*G_P_IFACE).SetRuntimeParameter.unwrap();

    let nSaveSettings: c_int = EU_SETTINGS_ID_NONE as c_int;
    let nSign = EU_SIGN_TYPE_CADES_T;

    set_runtime_parameter(
        EU_SAVE_SETTINGS_PARAMETER.as_ptr() as *mut i8,
        &nSaveSettings as *const _ as *mut c_void,
        EU_SAVE_SETTINGS_PARAMETER_LENGTH.into(),
    );
    set_runtime_parameter(
        EU_SIGN_TYPE_PARAMETER.as_ptr() as *mut i8,
        &nSign as *const _ as *mut c_void,
        EU_SIGN_TYPE_LENGTH.into(),
    );

    set_ui_mode(0);

    let set_mode_settings = (*G_P_IFACE).SetModeSettings.unwrap();
    set_mode_settings(0);

    // File store settings
    let set_file_store_settings = (*G_P_IFACE).SetFileStoreSettings.unwrap();
    let pszPath = CString::new(SZ_PATH).unwrap();
    let bCheckCRLs = 0;
    let bAutoRefresh = 1;
    let bOwnCRLsOnly = 0;
    let bFullAndDeltaCRLs = 0;
    let bAutoDownloadCRLs = 0;
    let bSaveLoadedCerts = 0;
    let dwExpireTime = 3600u32;

    dwError = set_file_store_settings(
        pszPath.as_ptr() as *mut c_char,
        bCheckCRLs,
        bAutoRefresh,
        bOwnCRLsOnly,
        bFullAndDeltaCRLs,
        bAutoDownloadCRLs,
        bSaveLoadedCerts,
        dwExpireTime.into(),
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // Proxy settings
    let set_proxy_settings = (*G_P_IFACE).SetProxySettings.unwrap();
    let pszProxyAddress = CString::new(PROXY_ADDRESS).unwrap();
    let pszProxyPort = CString::new(PROXY_PORT).unwrap();
    let pszProxyUser = CString::new(PROXY_USER).unwrap();
    let pszProxyPwd = CString::new(PROXY_PASSWORD).unwrap();

    dwError = set_proxy_settings(
        PROXY_USE,
        0, // bProxyAnonymous
        pszProxyAddress.as_ptr() as *mut c_char,
        pszProxyPort.as_ptr() as *mut c_char,
        pszProxyUser.as_ptr() as *mut c_char,
        pszProxyPwd.as_ptr() as *mut c_char,
        1, // bProxySavePassword
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // OCSP settings
    let set_ocsp_settings = (*G_P_IFACE).SetOCSPSettings.unwrap();
    let pszOCSPAddress = CString::new(DEFAULT_OCSP_SERVER).unwrap();
    let pszOCSPPort = CString::new("80").unwrap();

    dwError = set_ocsp_settings(
        1, // bUseOCSP
        1, // bBeforeStore
        pszOCSPAddress.as_ptr() as *mut c_char,
        pszOCSPPort.as_ptr() as *mut c_char,
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    let set_ocsp_access_info_mode_settings = (*G_P_IFACE).SetOCSPAccessInfoModeSettings.unwrap();
    dwError = set_ocsp_access_info_mode_settings(1);
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // Read CAs from JSON
    let jsonStr = read_file_to_string(CAS_JSON_PATH);
    let cas = parse_CAs_array(&jsonStr);

    let set_ocsp_access_info_settings = (*G_P_IFACE).SetOCSPAccessInfoSettings.unwrap();
    for ca_obj in &cas {
        for issuer_cn in &ca_obj.issuerCNsv {
            let c_issuer = CString::new(issuer_cn.as_str()).unwrap();
            let c_ocsp = CString::new(ca_obj.ocspAccessPointAddress.as_str()).unwrap();
            let c_port = CString::new(ca_obj.ocspAccessPointPort.as_str()).unwrap();
            dwError = set_ocsp_access_info_settings(
                c_issuer.as_ptr() as *mut c_char,
                c_ocsp.as_ptr() as *mut c_char,
                c_port.as_ptr() as *mut c_char,
            );
            if dwError != EU_ERROR_NONE.into() {
                return dwError;
            }
        }
    }

    // TSP settings
    let set_tsp_settings = (*G_P_IFACE).SetTSPSettings.unwrap();
    let c_tsp_addr = CString::new(DEFAULT_TSP_SERVER).unwrap();
    let c_tsp_port = CString::new("80").unwrap();

    dwError = set_tsp_settings(
        1, // bUseTSP
        c_tsp_addr.as_ptr() as *mut c_char,
        c_tsp_port.as_ptr() as *mut c_char,
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // LDAP settings (unused)
    let set_ldap_settings = (*G_P_IFACE).SetLDAPSettings.unwrap();
    dwError = set_ldap_settings(
        0,
        ptr::null_mut(),
        ptr::null_mut(),
        1,
        ptr::null_mut(),
        ptr::null_mut(),
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // CMP settings (unused)
    let set_cmp_settings = (*G_P_IFACE).SetCMPSettings.unwrap();
    let c_empty = CString::new("").unwrap();
    dwError = set_cmp_settings(
        1, // bUseCMP
        c_empty.as_ptr() as *mut c_char,
        CString::new("80").unwrap().as_ptr() as *mut c_char,
        c_empty.as_ptr() as *mut c_char,
    );
    if dwError != EU_ERROR_NONE.into() {
        return dwError;
    }

    // Load CA certificates:
    {
        let save_certificates = (*G_P_IFACE).SaveCertificates.unwrap();
        let mut res = read_all_bytes(CA_CERTIFICATES_PATH);
        if !res.is_empty() {
            let err = save_certificates(res.as_mut_ptr(), res.len() as c_ulong);
            if err != EU_ERROR_NONE.into() {
                return err;
            }
        }
    }

    // Create context
    let ctx_create = (*G_P_IFACE).CtxCreate.unwrap();
    let mut pvContext: *mut c_void = ptr::null_mut();
    dwError = ctx_create(&mut pvContext as *mut _);
    if dwError != EU_ERROR_NONE.into() {
        println!("{}", get_error_message(dwError));
        return dwError;
    }

    EU_ERROR_NONE.into()
}

///////////////////////////////////////////////////////////////////////////////
// DevelopCustomerCrypto(...) in Rust
///////////////////////////////////////////////////////////////////////////////
unsafe fn DevelopCustomerCrypto(
    pszPrivKeyFilePath: &str,
    pszPrivKeyPassword: &str,
    pszSenderCert: &str,
    pszCustomerCrypto: &str,
    ppbCustomerData: &mut *mut c_uchar,
    pdwCustomerData: &mut c_ulong,
    pSenderInfo: *mut EU_ENVELOP_INFO,
    pSignInfo: *mut EU_SIGN_INFO,
) -> c_ulong {
    let dwError = Initialize();
    if dwError != EU_ERROR_NONE.into() {
        println!("{}", dwError);
        return dwError;
    }

    // Because we do lots of calls, let's define closures for shorter usage:
    let read_private_key_file = (*G_P_IFACE).ReadPrivateKeyFile.unwrap();
    let reset_private_key = (*G_P_IFACE).ResetPrivateKey.unwrap();
    let base64_decode = (*G_P_IFACE).BASE64Decode.unwrap();
    let free_memory = (*G_P_IFACE).FreeMemory.unwrap();
    let develop_data_ex = (*G_P_IFACE).DevelopDataEx.unwrap();
    let base64_encode = (*G_P_IFACE).BASE64Encode.unwrap();
    let verify_data_internal = (*G_P_IFACE).VerifyDataInternal.unwrap();
    let free_sender_info = (*G_P_IFACE).FreeSenderInfo.unwrap();

    // 1) Read private key
    let c_key_path = CString::new(pszPrivKeyFilePath).unwrap();
    let c_key_pwd = CString::new(pszPrivKeyPassword).unwrap();
    let mut err = read_private_key_file(c_key_path.as_ptr() as *mut c_char, c_key_pwd.as_ptr() as *mut c_char, ptr::null_mut());
    if err != EU_ERROR_NONE.into() {
        return err;
    }

    // 2) Decode Sender cert
    let mut pbSenderCert: *mut c_uchar = ptr::null_mut();
    let mut dwSenderCertLength: c_ulong = 0;
    {
        let c_sender_cert = CString::new(pszSenderCert).unwrap();
        err = base64_decode(
            c_sender_cert.as_ptr() as *mut c_char,
            &mut pbSenderCert as *mut _,
            &mut dwSenderCertLength as *mut _,
        );
        if err != EU_ERROR_NONE.into() {
            reset_private_key();
            return err;
        }
    }

    // 3) Decode Customer Crypto
    let mut pbCustomerCrypto: *mut c_uchar = ptr::null_mut();
    let mut dwCustomerCryptoLength: c_ulong = 0;
    {
        let c_customer_crypto = CString::new(pszCustomerCrypto).unwrap();
        err = base64_decode(
            c_customer_crypto.as_ptr() as *mut c_char,
            &mut pbCustomerCrypto as *mut _,
            &mut dwCustomerCryptoLength as *mut _,
        );
        if err != EU_ERROR_NONE.into() {
            free_memory(pbSenderCert);
            reset_private_key();
            return err;
        }
    }

    // 4) Develop data
    let mut pbDecryptedCustomerData: *mut c_uchar = ptr::null_mut();
    let mut dwDecryptedCustomerLength: c_ulong = 0;

    err = develop_data_ex(
        ptr::null_mut(),
        pbCustomerCrypto,
        dwCustomerCryptoLength,
        ptr::null_mut(),
        0,
        &mut pbDecryptedCustomerData as *mut _,
        &mut dwDecryptedCustomerLength as *mut _,
        pSenderInfo,
    );
    if err != EU_ERROR_NONE.into() {
        free_memory(pbCustomerCrypto);
        free_memory(pbSenderCert);
        reset_private_key();
        return err;
    }

    // free intermediate
    free_memory(pbCustomerCrypto);
    free_memory(pbSenderCert);

    // 5) Re-sign data to verify
    let mut developedSign: *mut c_char = ptr::null_mut();
    err = base64_encode(
        pbDecryptedCustomerData,
        dwDecryptedCustomerLength,
        &mut developedSign as *mut _,
    );
    if err != EU_ERROR_NONE.into() {
        free_memory(pbDecryptedCustomerData);
        reset_private_key();
        return err;
    }

    // 6) verify_data_internal
    err = verify_data_internal(
        developedSign,
        ptr::null_mut(),
        0,
        ppbCustomerData,
        pdwCustomerData,
        pSignInfo,
    );
    if err != EU_ERROR_NONE.into() {
        free_sender_info(pSenderInfo);
        free_memory(pbDecryptedCustomerData);
        reset_private_key();
        return err;
    }

    // 7) cleanup
    free_memory(pbDecryptedCustomerData);
    reset_private_key();

    EU_ERROR_NONE.into()
}

///////////////////////////////////////////////////////////////////////////////
// The main() function, replicating your usage example
///////////////////////////////////////////////////////////////////////////////
fn main() {
    unsafe {
        // 1) Load the EUSignCP library
        let loaded = EULoad();
        if loaded == 0 {
            // Means it failed
            println!("{}", get_error_message(EU_ERROR_LIBRARY_LOAD.into()));
            std::process::exit(1);
        }

        // 2) Get the interface pointer
        let p_iface = EUGetInterface();
        if p_iface.is_null() {
            println!("{}", get_error_message(EU_ERROR_LIBRARY_LOAD.into()));
            EUUnload();
            std::process::exit(1);
        }
        G_P_IFACE = p_iface;

        // We'll track error codes
        let mut dwError: c_ulong = 0;

        // Prepare output pointers
        let mut pbCustomerData: *mut c_uchar = ptr::null_mut();
        let mut dwCustomerData: c_ulong = 0;

        // We want to fill these structs:
        let mut senderInfo = EU_ENVELOP_INFO {
            bFilled: 0,
            pszIssuer: ptr::null_mut(),
            pszIssuerCN: ptr::null_mut(),
            pszSerial: ptr::null_mut(),
            pszSubject: ptr::null_mut(),
            pszSubjCN: ptr::null_mut(),
            pszSubjOrg: ptr::null_mut(),
            pszSubjOrgUnit: ptr::null_mut(),
            pszSubjTitle: ptr::null_mut(),
            pszSubjState: ptr::null_mut(),
            pszSubjLocality: ptr::null_mut(),
            pszSubjFullName: ptr::null_mut(),
            pszSubjAddress: ptr::null_mut(),
            pszSubjPhone: ptr::null_mut(),
            pszSubjEMail: ptr::null_mut(),
            pszSubjDNS: ptr::null_mut(),
            pszSubjEDRPOUCode: ptr::null_mut(),
            pszSubjDRFOCode: ptr::null_mut(),
            bTimeAvail: 0,
            bTimeStamp: 0,
            Time: _SYSTEMTIME {
                wYear: 0,
                wMonth: 0,
                wDayOfWeek: 0,
                wDay: 0,
                wHour: 0,
                wMinute: 0,
                wSecond: 0,
                wMilliseconds: 0,
            },
        };
        let mut signInfo = EU_SIGN_INFO {
            bFilled: 0,
            pszIssuer: ptr::null_mut(),
            pszIssuerCN: ptr::null_mut(),
            pszSerial: ptr::null_mut(),
            pszSubject: ptr::null_mut(),
            pszSubjCN: ptr::null_mut(),
            pszSubjOrg: ptr::null_mut(),
            pszSubjOrgUnit: ptr::null_mut(),
            pszSubjTitle: ptr::null_mut(),
            pszSubjState: ptr::null_mut(),
            pszSubjLocality: ptr::null_mut(),
            pszSubjFullName: ptr::null_mut(),
            pszSubjAddress: ptr::null_mut(),
            pszSubjPhone: ptr::null_mut(),
            pszSubjEMail: ptr::null_mut(),
            pszSubjDNS: ptr::null_mut(),
            pszSubjEDRPOUCode: ptr::null_mut(),
            pszSubjDRFOCode: ptr::null_mut(),
            bTimeAvail: 0,
            bTimeStamp: 0,
            Time: _SYSTEMTIME {
                wYear: 0,
                wMonth: 0,
                wDayOfWeek: 0,
                wDay: 0,
                wHour: 0,
                wMinute: 0,
                wSecond: 0,
                wMilliseconds: 0,
            },
        };

        // 3) Decrypt / develop the customer crypto
        dwError = DevelopCustomerCrypto(
            PRIVATE_KEY_FILE_PATH,
            PRIVATE_KEY_PASSWORD,
            G_SZ_SENDER_CERT,
            G_SZ_CUSTOMER_CRYPTO,
            &mut pbCustomerData,
            &mut dwCustomerData,
            &mut senderInfo,
            &mut signInfo,
        );
        if dwError != EU_ERROR_NONE.into() {
            println!("{}", get_error_message(dwError));
            // finalize/unload
            if let Some(finalize_fn) = (*G_P_IFACE).Finalize {
                finalize_fn();
            }
            EUUnload();
            std::process::exit(1);
        }

        // 4) Convert raw bytes to string
        let mut pszCustomerData = Vec::with_capacity(dwCustomerData as usize + 1);
        pszCustomerData.resize(dwCustomerData as usize, 0);
        // copy bytes
        ptr::copy_nonoverlapping(
            pbCustomerData,
            pszCustomerData.as_mut_ptr(),
            dwCustomerData as usize,
        );
        // zero-terminate
        pszCustomerData.push(0);

        // free the raw memory from the library
        let free_memory = (*G_P_IFACE).FreeMemory.unwrap();
        free_memory(pbCustomerData);

        // interpret as UTF-8 (or ASCII)
        let customerData =
            String::from_utf8_lossy(&pszCustomerData[..dwCustomerData as usize]).to_string();

        // 5) Write result to a file
        write_all_text("./Modules/Data/data.json", &customerData);
        println!("{}", customerData);

        // free sign info, sender info, etc.
        let free_sign_info = (*G_P_IFACE).FreeSignInfo.unwrap();
        let free_sender_info = (*G_P_IFACE).FreeSenderInfo.unwrap();
        free_sign_info(&mut signInfo as *mut _);
        free_sender_info(&mut senderInfo as *mut _);

        // 6) Finalize the library
        let finalize_fn = (*G_P_IFACE).Finalize.unwrap();
        finalize_fn();
        EUUnload();
    }
}
